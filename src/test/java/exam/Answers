1. Типы данных
Типы данных бывают примитивные: byte, short, int, long, float, double, char, boolean
и ссылочные: String
Также у всех примитивных типов есть класы обвертки: Byte, Short, Integer, Long, Float, Double, Character, Boolean

2. Есть 4 модификатора доступа:
public - видимость везде, нет ограничений, члены класа доступны всем
private - видимость только внутои класса
protected - члены класса доступны внутри пакета и в наследующих класссах;
и ничего, пусто, по умолчанию - члены класса видны только внутри пакета

3. ООП
Java это обьектноориентированный язык програмирования. Базовое на чем строется все это обьекты и  классы.
ООП включает 4 основных понятия:
Абстракция - у нас еть абстрактные классы, интерфейсы, общаяя реализация какойто части программы или самой программы,
тоесть такой себе каркас, шаблон которым можно пользоватся для работы с программой, строить свои программы на
основании этих каркасов (например в коллекция есть интерфейсы и обстактные классы которые предоставляют обшие методы
для работы с коллекциями или пример WebDriver)
Инкапсуляция - это возможность обьединять в себе свойства системы и давать разные модифиукаторы доступа, например
возможность скрыть реализацию работы программы, а давать только возможность пользоватся ею
Наследование - свойство системы, позволяющее описать новый класс на основе уже существующего
с частично или полностью заимствующейся функциональностью (используем extend, implement)
Плиморфизм -  свойство системы, позволяющее использовать объекты с одинаковым интерфейсом
без информации о типе и внутренней структуре объекта

4. Конструктор - это специальный метод, который вызывается при создании нового объекта. ПКонструктор нужен для
автоматической инициализации переменных. Конструктор имеет такое же название как и класс
Пример конструктора:
public static class Cat {
        private String name;
        public Cat(String name){   //это конструктор
            this.name = name; }
 Методы - с помошью методов мы создаем решение определенных задачь, общий вид
  public static void someMethod() {
         // Тело метода
     }
    тут public - модификатор доступа
    void- значит что метод ничего не возвращает (не надо писать return в теле)

 5. Static - oзначает что метод статический, он принадлежит классу в котором создан (пусть будет називаться Сat), а не конкретному экземпляру
  этого класса. Мы можем вызвать этот метод из другого класса так:  Cat.someMethod().

 6. Интерфейс / Абстрактный класс
 Разница между первым и вторым в том что в абстр.класс можем сделать реализацию методов, а в интерфейсе нет и если
 наследуемся от абстрактного класса, то обязаны в нашем класе применить все что есть в абстрактном классе, а если от
 интерфейсе то не нужно применять все что там есть, ето просто как шаблон, образец. В интерфейсе мы можем только
 сделать описание методов, констант но не можем их там реализовать. Также важно что мы можем наследовать классы от многих интерфейсов,
 но только от одного абстрактного класа. Также в интерфейсе нет конструктора, а в абстрактном классе мы можем его написать.

 7.String / StringBuilder
 Есть тип данных String, он immutable. StringBuilder и StringBuffer создали для упрощенной работы со String и они mutable(скорее всего слово
 не так написала но надеюсь ты понял что имелла в виду).
 Эти два класса вработе показивают себя быстрее чем работать просто чере String и у них есть доп методы
 с помощью которых работа со строками делается проще и быстрее.

8, 9. public static class Jack {
       public static void drink(){}
 }

10. public static class Bar {
 Jack jack = new Jack();
 }

11.  Double fin;
      String toDouble = "25.84553";
       fin = Double.valueOf(toDouble);

12. смотреть класс StringNumber (в нете еще предлгают через регулярные выражения написать,
но с помощью сециального метода мне показалось что это можно сделать проеще)

13. смотреть public class Arrays3on3

14. Есть общий интерфейс Collection, также есть интерфейс Set и List кторые расширяют интерфейс Collection. У всех этих интерфейсов есть свои методы,
которые можно испльзовать при работае с определенными коллекциями.
ArrayList, LinkedList это базовые классы коллекций. Доступ к обьектам происходит по индексу.
Итерации можно делать с помощью цикла foreach или класса Iterator (Iterator<String> iterator = list.iterator();).
ArrayList -  расширяет класс AbstractList и реализует интерфейс List. По сути это простой список, аналогичный массиву,
за тем исключением, что количество элементов в нем не фиксировано. Создаем его так: ArrayList<String> arlist = new ArrayList<String>();
LinkedList -  класс расширяет класс AЬstractSequentalList и реализует интерфейс List. Данные представлены в виде связанного списка,
есть ссылка на предыдущий и следующий обьект.

15. смотреть класс SortListName

16. Set
Set это интерфейс для работы с коллекциями. От интерфейс Set наследуется класса AbstractSet, а от него наследуют
свой функционал классы HashSet, LinkedHashSet, TreeSet. Основное отличие классов HashSet, LinkedHashSet, TreeSet в порядке
хранения элементов коллекции. Особенность Set в том что это надоб данных в котором нельзя
хранить одинаковые обьекты, они все уникальны и нет повторений.

17. смотреть класс TopIMDB

18. Итерация по map
Есть интерфейс Map, далее идет абстрактый класс AbstractMap и потом наследуются классы HashMap, LinkedHashMap, TreeMap.
Особенность в том что данные хранятся в виде пары: ключ и значение. Зная ключ, можно найти значение.
Ключи должны быть уникальными. Так жк как и в предыдущих колеекциях, можно делать итерации по Map
с помощью цикла foreach или класса Iterator, итератор нужен для переюора элементов коллекции, вывода всех ее элементов или определенных
и т.д, пример реализации смотреть в классе IteratorMapExample

19. Exceptions
Exceptions - это ошибки котрые могут возникнуть во время работы программы. Исключения делятся на  unchecked
(такие исключения не нужно обрабатыват, например нехватка памяти в программе, мы это никак не можем предугадать)
и checked (эти исключения нужно обрабатывать). Есть ключевые понятие которые используются при обработке исключений:
try, catch, finally, throw, throws. Исключения нужно обрабатывать хотя бы для того, что б наша программа не заканчивала
внезапно свою работу и не ставила в тупик пользователя что не так, а допустим дальше продолжала свою работу.

20. cмотреть класс IsElementPresent

21. смотреть класс ParamFromXml и PutParamTestNG.xml
